import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import PptxGenJS from 'pptxgenjs';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { topic, slideCount = 10, template = 'modern', tone = 'professional', language = 'English', model = 'gemini-1.5-pro', provider = 'google', apiKey } = body;

    console.log('Generate request:', { topic, slideCount, template, tone, language, model, provider, hasApiKey: !!apiKey });

    if (!topic) {
      return NextResponse.json(
        { error: 'Topic is required' },
        { status: 400 }
      );
    }

    if (!apiKey) {
      return NextResponse.json(
        { error: 'API key is required. Please configure your AI provider key in the Settings tab.' },
        { status: 400 }
      );
    }

    // Generate presentation content using AI
    let slideContent: Array<{ title: string; content: string[] }>;

    if (provider === 'google') {
      slideContent = await generateWithGemini(apiKey, topic, slideCount, tone, language, model);
    } else if (provider === 'openai') {
      return NextResponse.json(
        { error: 'OpenAI provider not yet implemented. Please use Google AI.' },
        { status: 501 }
      );
    } else if (provider === 'anthropic') {
      return NextResponse.json(
        { error: 'Anthropic provider not yet implemented. Please use Google AI.' },
        { status: 501 }
      );
    } else {
      return NextResponse.json(
        { error: 'Invalid provider' },
        { status: 400 }
      );
    }

    // Create PowerPoint using pptxgenjs
    const pptx = new PptxGenJS();

    // Apply template styling
    const templateConfig = getTemplateConfig(template);

    // Title slide
    const titleSlide = pptx.addSlide();
    titleSlide.background = { color: templateConfig.primaryColor };
    titleSlide.addText(topic, {
      x: 0.5,
      y: 2.0,
      w: '90%',
      h: 1.5,
      fontSize: 44,
      bold: true,
      color: templateConfig.titleColor,
      align: 'center',
    });
    titleSlide.addText('Generated by Behavior School AI', {
      x: 0.5,
      y: 5.0,
      w: '90%',
      h: 0.5,
      fontSize: 16,
      color: templateConfig.subtitleColor,
      align: 'center',
    });

    // Content slides
    slideContent.forEach((slide) => {
      const contentSlide = pptx.addSlide();
      contentSlide.background = { color: templateConfig.backgroundColor };

      // Title
      contentSlide.addText(slide.title, {
        x: 0.5,
        y: 0.5,
        w: '90%',
        h: 0.75,
        fontSize: 32,
        bold: true,
        color: templateConfig.titleColor,
      });

      // Content bullets
      const bulletPoints = slide.content.map((point) => ({
        text: point,
        options: { bullet: true }
      }));

      contentSlide.addText(bulletPoints, {
        x: 0.5,
        y: 1.5,
        w: '90%',
        h: 4.0,
        fontSize: 18,
        color: templateConfig.textColor,
        bullet: { type: 'bullet' },
        valign: 'top',
      });
    });

    // Generate the PPTX file
    const pptxBuffer = await pptx.write({ outputType: 'arraybuffer' }) as ArrayBuffer;
    const uint8Array = new Uint8Array(pptxBuffer);

    // Return the file
    return new NextResponse(uint8Array, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'Content-Disposition': `attachment; filename="${sanitizeFilename(topic)}.pptx"`,
      },
    });
  } catch (error) {
    console.error('Presentation generation error:', error);
    return NextResponse.json(
      {
        error: 'Failed to generate presentation',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

async function generateWithGemini(
  apiKey: string,
  topic: string,
  slideCount: number,
  tone: string,
  language: string,
  modelName: string
): Promise<Array<{ title: string; content: string[] }>> {
  try {
    console.log('Initializing Gemini with model:', modelName);
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: modelName });

    const prompt = `Create a ${slideCount}-slide presentation about "${topic}" in ${language}.
The tone should be ${tone}.

For each slide (excluding the title slide), provide:
1. A clear, concise title
2. 3-5 bullet points with key information

Format your response as a JSON array of objects with this structure:
[
  {
    "title": "Slide Title",
    "content": ["Bullet point 1", "Bullet point 2", "Bullet point 3"]
  }
]

Generate ${slideCount - 1} content slides (the title slide will be added automatically).`;

    console.log('Calling Gemini API...');
    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();

    console.log('Gemini response received, length:', text.length);

    // Extract JSON from the response
    const jsonMatch = text.match(/\[[\s\S]*\]/);
    if (!jsonMatch) {
      console.error('Failed to parse JSON from response:', text.substring(0, 500));
      throw new Error('Failed to parse AI response. Response format was invalid.');
    }

    const parsed = JSON.parse(jsonMatch[0]);
    console.log(`Successfully parsed ${parsed.length} slides`);
    return parsed;
  } catch (error) {
    console.error('Gemini generation error:', error);
    if (error instanceof Error) {
      throw new Error(`Gemini API error: ${error.message}`);
    }
    throw error;
  }
}

function getTemplateConfig(template: string) {
  const templates: Record<string, {
    primaryColor: string;
    backgroundColor: string;
    titleColor: string;
    subtitleColor: string;
    textColor: string;
  }> = {
    modern: {
      primaryColor: '10B981',
      backgroundColor: 'FFFFFF',
      titleColor: '1F2937',
      subtitleColor: 'FFFFFF',
      textColor: '374151',
    },
    general: {
      primaryColor: '3B82F6',
      backgroundColor: 'FFFFFF',
      titleColor: '1E40AF',
      subtitleColor: 'FFFFFF',
      textColor: '1F2937',
    },
    swift: {
      primaryColor: '8B5CF6',
      backgroundColor: 'FFFFFF',
      titleColor: '5B21B6',
      subtitleColor: 'FFFFFF',
      textColor: '4C1D95',
    },
    minimal: {
      primaryColor: '000000',
      backgroundColor: 'FFFFFF',
      titleColor: '000000',
      subtitleColor: 'FFFFFF',
      textColor: '374151',
    },
    corporate: {
      primaryColor: '1F2937',
      backgroundColor: 'F9FAFB',
      titleColor: '111827',
      subtitleColor: 'FFFFFF',
      textColor: '374151',
    },
  };

  return templates[template] || templates.modern;
}

function sanitizeFilename(filename: string): string {
  return filename
    .replace(/[^a-z0-9]/gi, '_')
    .replace(/_+/g, '_')
    .substring(0, 50);
}
